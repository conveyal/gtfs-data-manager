# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="WRrVVuBC:D<@STKaQamIHh56CWT[Z;Mife3sS2i=qN/GBp:dCbeD=;jq0^R:bsZ"

# Do users have to be authenticated to download a CSV of a feed collection?
application.require-auth-for-csv-download=true

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~

application.data.mapdb=data/mapdb

# this must be a dedicated directory
application.data.gtfs=data/gtfs

# where the public feed download files will be put
# this can then be served by a front-end HTTP server, e.g. nginx
application.data.public=data/public

# where the public branding asset files will be put
# this can then be served by a front-end HTTP server, e.g. nginx
# application.data.branding_internal=data/branding
# application.data.branding_public="http://myserver/branding"


# Where do we deploy to?
# Each server (set) has internal URL(s), which are to all of the instances, and a public URL
# It's fine to have the internal URL be a list with a single item, and the external URL be the same.
# We have this level of abstraction to allow for configurations with multiple servers and a loadbalancer
# The public URLs should point to a deployment of otp.js pointing at the correct backend server.
application.deployment.servers = {
  Production: {
    internal: ["http://localhost:8080/otp"],
    public: "http://localhost:8291",
    # setting admin: true means only administrators will be able to deploy to this target
    admin: true

    # Uncomment and complete the following to also upload the bundle to a S3 bucket. Specifying a local
    # credentials file via 's3credentials' is optional; if unspecified the AWS SDK will look for credentials
    # using the default chain (environment variables, etc.). If the following is set and 'internal' is not,
    # then the deployment will only write the bundle to S3.

    # s3bucket: "your-bucket"
    # s3credentials: "/path/to/your/credentials"
  },
  # you can run scripts/receiveFile.js to save deployment bundles to /tmp/deployment.zip for inspection.
  Dump: {
    internal: ["http://localhost:8555"],
    public: "http://localhost:8555/"
  }
}

# The vex (https://github.com/conveyal/vanilla-extract) server used to grab OSM data
application.deployment.osm_vex="http://localhost:8282"

# A buffer in km to apply to the GTFS bounds when extracting OSM. Defaults to 10 if not specified.
# application.deployment.osm_buffer_km=10

# Auth0 configuration
application.auth0.domain="yourdomain.auth0.com"
application.auth0.client_id="your-client-id"
application.auth0.client_secret="your-client-secret"

# Datatools suite configuration
application.editor_url="http://localhost:9001"
application.user_admin_url="http://localhost:3000"
application.logo="http://gtfs-assets-dev.conveyal.com/data_manager.png"

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG
